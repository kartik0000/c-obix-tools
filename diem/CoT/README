
  CoT - C oBIX Tools v.0.2 [not released yet]
  
 Set of tools for oBIX-based solutions development.
 
==============>>

 Copyright (c) 2009, 2011 Andrey Litvinov [litvinov.andrey@gmail.com]    
 
 CoT is a free software. It is licensed under MIT (X11) License. Text of the
 license can be found at the file COPYING.
 
==============>>
    
 This file contains description of the project in the following sections:
 
 1. Project Overview
 2. System Requirements
 3. Package Contents
 4. Building Instructions
 5. Configuring oBIX Server
 
==============>>

 --1-- Project overview
 
 C oBIX Tools (CoT) is an open source project dedicated for the development of 
 embedded Building Automation solutions based on oBIX standard 
 (http://www.obix.org). The whole project is written in C and has tiny resource
 requirements. It allows the project to run on embedded Linux platforms, such as
 OpenWrt (http://openwrt.org).
 
 The project consists of 2 parts:
  - C oBIX Server and
  - C oBIX Client library
 
 == C oBIX Server ==
 
 C oBIX Server is a stand-alone application intended for storing building 
 automation data from various sources. It is a core for automation systems, 
 which provides unified Web services interface to control connected devices 
 (security sensors, heating/ventilation systems, lights, switches, etc.). 
 Devices are connected to the server through oBIX adapters. These adapters are 
 separate applications, which convert device specific protocol into oBIX 
 messages. Thus, the server provides the same oBIX interface both for devices 
 (device adapters) and for UI management applications. 

 The main difference of this oBIX server from other available implementations 
 (like oFMS http://www.stok.fi/eng/ofms/index.html or 
 oX http://obix-server.sourceforge.net) is that it is written in C and thus can 
 run on cheap low-resource platforms. 

 The whole project was developed with the main idea to minimize resource 
 consumption and make the implementation as easy as possible. Thus, the server 
 implements only basic oBIX functionality. If you are not going to run the 
 server on embedded device than you may consider using another more complete 
 oBIX implementation. 
 Here is the list of currently implemented oBIX features:
  - Read, write and invoke requests handling;
  - Lobby object;
  - Full implementation of WatchService;
  - Batch operation;
  - HTTP protocol binding.
 Things that are NOT yet supported:
  - Alarms;
  - Feeds;
  - Histories;
  - Writable points (simple writable objects can be used instead);
  - Permission based degradation;
  - Localization;
  - SOAP binding.
 If some feature doesn’t appear in either of the lists above, most probably it 
 is not implemented. 

 In addition to standard oBIX functionality, the server has the following 
 additional features:
  - signUp operation, accessible from the Lobby object. It allows clients 
    (device adapters) to publish new data at the server.
  - Device list, showing all devices connected to the server. The list is also 
    available from the Lobby object.
  - Long polling mode for Watch objects. This mode allows clients to reduce 
    amount of poll requests and in the same time receive immediate updates from 
    the server. Additional information about this feature can be found at 
    http://c-obix-tools.googlecode.com/files/long_polling.pdf .
  - Operation forwarding. This is an advanced feature that allows clients to 
    publish operations at the oBIX server with signUp service and handle this 
    operations remotely. Registering for receiving operation calls is done using
    Watch.addOperation (see OperationWatch contract definition at 
    res/server_def.xml). Then every invocation is sent to the client with Watch 
    poll responses. Client is then responsible to handle the operation and send
    the response back to server using Watch.operationResponse function. 
    C oBIX Client library provides a convenient API for using this feature that 
    hides all communication with the server.
    TODO: improve this description.

 An example of running server can be found at http://testbed.tml.hut.fi/obix/ 
 
 == C oBIX Client Library ==
 
 C oBIX Client Library (libcot) is intended mainly for the development of oBIX 
 device adapters. It hides details of communication with oBIX server, providing 
 a simple API to publish, read and write data at the server. The library should 
 be compatible with any other oBIX server implementations (if not – please, 
 report the bug). Together with C oBIX Server, the libcot library forms a 
 complete framework for rapid development of embedded home or building 
 automation server.

 The library allows to perform the following oBIX actions:
  - Read objects from oBIX server;
  - Change object values at the server;
  - Publish new data to the server (using signUp operation);
  - Subscribe to data updates at the server. From the developer’s point of view 
    it happens as a simple callback function registration, while library deals 
    with oBIX Watch objects management. 
  - Grouping several read and write operations in one Batch request. 
 
 In addition, library contains a set of utilities, which can be useful during 
 oBIX client application development (e.g., timer implementation, logging 
 utilities, etc.). Several examples in distribution show how all these APIs can 
 be used. 

 Library documentation can be either taken from the project home page 
 or (http://code.google.com/p/c-obix-tools) compiled from project sources (see 
 building instructions for details).
 
==============>>

 --2-- System Requirements
 
 The project is created for running on Linux platforms. It was tested on various 
 platforms including embedded devices with OpenWrt (http://openwrt.org) 
 installed. An example of tested embedded platform is Asus WL-500g Premium V2 
 router (32 MB of RAM and 240 MHz CPU). Any other device capable to run OpenWrt 
 can be used instead.

 Other Linux distributions for embedded devices were not tested but can be 
 possible used if all project dependencies are satisfied.

 The project has the following library dependencies:
  - libfcgi
  - libupnp
  - libcurl
  
 C oBIX Server is implemented as a FastCGI (http://www.fastcgi.com) application 
 and requires, in addition, a Web server with FastCGI support. It was tested 
 only with Lighttpd (http://www.lighttpd.net/), but theoretically, it can be 
 used with any other Web server. The only requirement is that the chosen Web 
 server should support FastCGI multiplexing feature (ability to handle multiple 
 requests simultaneously through one FastCGI connection), which is not 
 supported, for instance, by Apache.  

 OpenWrt SDK is required in order to cross-compile the project for OpenWrt 
 platform. Further instructions on cross-compiling can be found at 
 ./res/OpenWrt-SDK/README file. Precompiled binaries for OpenWrt 7.09 are 
 available at Download section of project home page 
 (http://code.google.com/p/c-obix-tools/).
 
==============>>

 --3-- Package Contents
 
 Below is a short description of the main files in the package:
 
 README				This file. Contains project description.
 COPYING			Contains licensing terms for the project.
 
 src/				Folder with project source files.
 
    ./adapters/		Contains sources of oBIX device adapters which are 
 					implemented using libcot library. 
 
    ./adapters/example_timer.c
                    Source of example device adapter which shows how libcot can 
                    be used for oBIX client implementation.
 
    ./adapters/sensor_floor_driver.c
 					Source of sensor floor adapter.
 
    ./client/		Sources of libcot library. 

    ./common/		Common sources for client and server part of the project.
 
    ./server/		Sources of oBIX server.
 
    ./test/			Tests sources which are used only during development.
    
    ./doxygen/		Documentation source files.
 
 doc/				Contains project documentation, which is built by Doxygen. 
 					HTML documentation is much more easier to read, but .pdf
 					files can be used to make a hard copy versions.
 
 res/				Various configuration files.
 
 res/server_config.xml
 					Main configuration file of the oBIX server.
 					
 res/server_*.xml	Rest of files with 'server_' prefix contain initial database
 					contents of the oBIX server.
 					
 res/obix-lighttpd.conf	
 					Lighttpd configuration file template. Used for configuring 
 					oBIX fcgi script.
 					
 res/sensor_floor_config.xml
 					Sensor floor adapter's configuration file.
 					
 res/example_timer_config.xml
 					Example adapter's configuration file.
 					
 res/test_*.xml		Files used by tests.
 
 res/OpenWrt-SDK/	Folder contains makefiles and instructions for building 
 					project for OpenWrt platform.            
 
==============>>

 --4-- Building Instructions
 
 Please refer to res/OpenWrt-SDK/README if you want to compile the project for 
 OpenWrt platform.
  
 Simple compilation can be done by executing following commands in the project 
 root folder (for advanced instructions read /INSTALL):
 
 Before the first compilation:
 
 ./configure		That will configure building system according to your system 
 					configuration. 					  					
 					
 You would probably like to use also the following flags:
   
  CFLAGS="-O0 -g"	Forces to produce binaries which are easier to debug.
  
  --prefix="<path>" Sets the installation root folder. By default, package is
  					installed to /usr/{bin,lib,include}.
 
 You will need the following libraries to build CoT (configure script should 
 tell you which are missing):
  - libfcgi
  - libupnp
  - libcurl  		
 
 In order to build project documentation there should be following tools 
 installed:
  - Doxygen (http://www.doxygen.org/);
  - A LaTeX distribution supported by Doxygen;
  - dot tool for generating nice diagrams (http://www.graphviz.org/).		
  					
 After ./configure is successfully completed execute:
 
 make all			That would compile the project. All binaries will be placed 
 					in the same folders with source files. 
 
 make install		Will put binaries, config files and documentation to the 
 					installation directories. 
 
==============>>

 --5-- Configuring oBIX Server
 
 oBIX server is implemented as FastCGI script which can be executed by any HTTP
 server with FCGI support. This section describes how to use lighttpd 
 (http://lighttpd.net) for running oBIX server. Most of steps would be probably 
 the same for other HTTP servers.
 
 0. Compile and install CoT (see section 3).
 
 1. Install lighttpd at your target system.
 
 2. Open server_config.xml file with your favorite XML editor. Usually it is 
    placed at <installation_prefix>/etc/cot/ folder. This is the main (and the 
    only one) configuration file of the oBIX server.
    
 3. All configuration tags are described well there: Read description carefully,
    modify and save options according to your needs.
        
 4. Open <installation-prefix>/etc/cot/obix-lighttpd.conf file. This file 
    contains required settings for lighttpd. It tells lighttpd how to launch the 
    fcgi script (i.e. oBIX server application).
    
 5. Modify paths in the following variables:
 	- "socket"  		Defines socket name which will be used for communication 
 						between lighttpd and oBIX server.
 						
 	- "bin-path"		Command which starts up the oBIX server, which is 
 						"<path-to-obix.fcgi> [-syslog] [<path-to-res-folder>]"
 						where
 						<path-to-obix.fcgi> 
 						        Location of obix.fcgi file. Note that working 
 						         directory may vary for different configurations
 						         so it's better to provide an absolute path.
 						         
 						-syslog Tells server to use syslog for logging messages
 						         before actual log settings are loaded from 
 						         configuration file. It can be useful if some
 						         error occurs, for instance, during settings 
 						         parsing. Messages are sent to syslog with 
 						         facility 'user'. 
 						         If this parameter is not provided than all 
 						         messages which were generated before log 
 						         settings are loaded will be written to the 
 						         standard output.
 						         
 						<path-to-res-folder>
 						        Address of the folder with server's resource 
 						         files. These are installed to /etc/cot/ by
 						         default.         
 						          
 						Example: If you have installed CoT to the <prefix> 
 						folder, than the "bin-path" value can look like 						
 						"<prefix>/bin/obix.fcgi <prefix>/etc/cot/"
 						
 	- "bin-environment"	This variable can be totally omitted, or used, for 
 						instance, for specifying the path to shared libraries.
 	
 	In order to check whether the launch command in "bin-path" is correct you 
 	can try to execute it from the command line. If everything is fine, than 
 	oBIX server should start up, write few log messages and then immediately 
 	shutdown gracefully because of no fcgi connection. If you have configured
 	oBIX server to use syslog for logging messages, make sure, that log doesn't
 	contain any error messages except errors about fcgi.
 									 		 
 6. Locate your lighttpd configuration file. Usually it is at /etc/lighttpd/
 
 7. In case if you have /etc/lighttpd/conf-available/ folder than you are lucky
 	and should proceed with steps a. otherwise, go to steps b.
 	
 	a. Go to conf-available/ folder and create symlink '10-obix-fcgi.conf' to
 	   the updated <prefix>/etc/cot/obix-lighttpd.conf file. 
 	   Execute command '/usr/sbin/lighty-enable-mod obix-fcgi' and restart 
 	   lighttpd.
 	   (Read conf-available/README in order to get more details about what you
 	   have done.)
 	   
 	b. In case you do not have the described folder for lighttpd in your target 
 	   platform, than open the main lighttpd configuration file (usually it is
 	   /etc/lighttpd/lighttpd.conf) and paste to the end the contents of updated 
 	   res/obix-lighttpd.conf file.
 	   Note that "server.modules" are usually defined in the beginning of the
 	   conf file, so check that pasted string doesn't conflict with the 
 	   original definition.
 	   Save configuration and restart lighttpd.
 	   
 8. If everything is OK, than you will be able to access oBIX server from your
    browser under the following link: http://<you server address>/obix/
    In case of any problems try to check lighttpd and oBIX server error log 
    files. If it doesn't help than contact me, and I'll try to make better
    version of these instructions.
 
==============>>